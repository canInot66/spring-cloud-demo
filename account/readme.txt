spring 微服务实战
第8章 使用Spring Cloud Stream的事件驱动架构
交互模型
指出 我们 与 世界 的 互动 不是 同步 的、 线性 的， 不能 狭义 地 定义 为 一个 请求- 响应 模型。 它是 消息 驱动 的，

新鲜 的 是 使用 消息 实现 事件 通信 的 概念， 这些 事件 代表 了 状态 的 变化。 这个 概念 称为 事件 驱动 架构（ Event Driven Architecture， EDA），
也 被称为 消息 驱动 架构（ Message Driven Architecture， MDA）。

消息传递架构的缺点
1. 消息处理语义
 它要 求 开发 人员 了解 应用 程序 消费 有序 消息 时 的 行为 是什么， 以及 如果 消息 没有 按 顺序 处理 会 发生 什么 情况。
2. 消息可见性
异步，存在延迟
3. 消息编排

spring cloud stream 架构
1. 发射器
当 一个 服务 准备 发布 消息 时， 它将 使用 一个 发射器 发布 消息。 发射器 是 一个 Spring 注解 接口， 它 接收 一个 普通 Java 对象（ POJO），
 该 对象 代表 要 发布 的 消息。 发射器 接收 消息， 然后 序列 化 它（ 默认 的 序列 化 是 JSON） 并将 消息 发布 到 通道。

2. 通道
通道 是对 队列 的 一个 抽象， 它将 在 消息 生产者 发布 消息 或 消息 消费者 消费 消息 后 保留 该 消息。 通道 名称 始终 与 目标 队列 名称 相 关联。
然而， 队列 名称 永远 不会 直接 公开 给 代码， 相反， 通道 名称 会在 代码 中 使用。 这 意味着 开发 人员 可以 通过 更改 应用 程序 的 配置 而 不是
应用 程序 的 代码 来 切换 通道 读取 或 写入 的 队列。

3. 绑定器
绑 定 器 是 Spring Cloud Stream 框架 的 一部分， 它是 与 特定 消息 平台 对话 的 Spring 代码。 Spring Cloud Stream 框架 的 绑 定 器
部分 允许 开发 人员 处理 消息， 而 不必 依赖于 特定 于 平台 的 库 和 API 来 发布 和 消费 消息。

4. 接收器
在 Spring Cloud Stream 中， 服务 通过 一个 接收器 从 队列 中 接收 消息。 接收器 监听 传入 消息 的 通道， 并将 消息 反序 列 化为 POJO。
从这 里 开始， 消息 就可以 按照 Spring 服务 的 业务 逻辑 来 进行 处理。

8.4.2 定义自定义通道
1. 使用接口定义
2. 使用spring 注解

